<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-gb" xml:lang="en-gb" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="" data-mc-priority="0" data-mc-time-estimate="0" data-mc-id="Header_text_example_for_QCPopulation.Print_or_QCAudit.Print">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>Header text example for QCPopulation.Print or QCAudit.Print</title>
        <link href="../../../../Resources/StyleSheets/shared.css" rel="stylesheet" type="text/css" />
        <script src="../../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js" defer="defer" type="text/javascript">
        </script>
    </head>
    <body>
        <h1><a name="aanchor105"></a>
            <MadCap:concept term="Quality control" /><a href="../../index_qc.htm">Quality control</a> -&gt; Header text example 
 for QCPopulation.Print or QCAudit.Print</h1>
        <p>This page contains an example of a text that can be used as header in 
 the <a href="qc_populations_print.htm">QCPopulation.Print</a> or <a href="qc_audits.htm#QC%20audit%20print">QCAudit.Print</a> 
 function.&#160; The text below is based on the QCAudit table.</p>
        <table style="background-color: #E2E2E2;width: 100%;x-border-left: 1px table-solid;x-border-top: 1px table-solid;x-border-right: 1px table-solid;x-border-bottom: 1px table-solid;border-collapse: separate;border-spacing: 0px;" cellspacing="0" width="100%" bgcolor="#E2E2E2" border="1">
            <tr>
                <td style="width: 100%;padding-left: 2px;padding-top: 2px;padding-right: 2px;padding-bottom: 2px;" width="100%"><pre>{:
FRACTIONAL Pivot;
STRING RMax, R;
STRING VCMax, VC;
STRING MaxDev;Pivot := .Population.Pivot;
IF .Population.TargetValue &lt; Pivot
THEN
  RMax := FractionalToString(.Population.MaximalInaccuracy * Pivot / 100, "%g") + "(abs)";
  R := FractionalToString((.Mean - .Population.TargetValue), "%g") + "(abs)";
  VCMax := FractionalToString(.Population.MaximalVC * Pivot/ 100, "%g") + "(abs)";
  VC := FractionalToString(.VC * .Mean / 100, "%g") + "(abs)";
  MaxDev := FractionalToString(.Population.AccuracyLimit * Pivot / 100, "%g") + "(abs)";
ELSE
  RMax := FractionalToString(.Population.MaximalInaccuracy, "%g") + "%";
  R := FractionalToString(100 * (.Mean - .Population.TargetValue) / .Population.TargetValue, "%g") + "%";
  VCMax := FractionalToString(.Population.MaximalVC, "%g") + "%";
  VC := FractionalToString(.VC, "%g") + "%";
  MaxDev := FractionalToString(.Population.AccuracyLimit, "%g") + "%";
ENDIF;
IF "{Format}" = "Text"
THEN RETURN
EnumeratedToString("QCType", .QCType) + " control" + "~n~n" +
"Department: " + GetCorrespondentId(CurrentDepartment(), ?).Name + "~n" +
GetCorrespondentId(CurrentDepartment(), ?).AddressLine1 + "~n" +
"Generated by " + CurrentUser() + " on " + DateToString(Today(), "%d/%m/%y") + "~n~n" +
"Property: " + .Population.AssessmentMethod.Property.Mnemonic  + "~n" +
"Period: " + DateToString(.StartDate, "%d/%m/%y") + " - " + 
  DateToString(.EndDate, "%d/%m/%y") + "~n" +
"Unit: " + IfKnownString(.Population.AssessmentMethod.Property.Unit.Name) + "~n" +
"Method:" + IfKnownString(.Population.AssessmentMethod.Method) + "~n" +
"Station: " + .Population.AssessmentMethod.Station.Mnemonic + "~n" +
"Material:" + .Population.Lot.Material.Mnemonic + "~n" +
"Lot:" + .Population.Lot.LotNumber + "~n" +
"Supplier:" + IfKnownString(.Population.Lot.Material.Supplier.Name) + "~n" +
"Expires:" + IfKnownString(DateToString(.Population.Lot.ExpirationDate, "%d/%m/%y")) + "~n" +
"Comment:" + IfKnownString(.Population.Comment) + "~n" +
"Accuracy target:" + IfKnownString(FractionalToString(.Population.TargetValue, "%g")) + "~n" +
"Max. dev.:" + IfKnownString(MaxDev) + "~n" +
"Range: " + IfKnownString(FractionalToString(.Population.AccuracyLowLimit, "%g")) + "-" +
IfKnownString(FractionalToString(.Population.AccuracyHighLimit, "%g")) + "~n" +
"Precision mean:" + IfKnownString(FractionalToString(.Population.TargetMean, "%g")) + "~n" +
"SA:" + IfKnownString(FractionalToString(.Population.TargetDeviation, "%g")) + "~n" +
"Range:" + IfKnownString(FractionalToString(.Population.TargetMean - 
  3 * .Population.TargetDeviation, "%g")) + "-" + IfKnownString(FractionalToString(
.Population.TargetMean + 3 * .Population.TargetDeviation, "%g")) + "~n" +
"Actual mean:" + IfKnownString(FractionalToString(.Mean, "%g")) + "~n" +
"SD:" + IfKnownString(FractionalToString(.StandardDeviation, "%g")) + "~n" +
"Count:" + IntegerToString(.OfficialResultCount, "%d") + "/" +
  IntegerToString(.ResultCount, "%d") + "~n" +
"Max. imprecision:" + "" +
"VC(max):" + IfKnownString(VCMax) + "~n" +
"VC(act):" + IfKnownString(VC) + "~n" +
"Max. inaccuracy:" + "" +
"R(max):" + IfKnownString(RMax) + "~n" +
"R(act):" + IfKnownString(R) + "~n"
;
ENDIF;

</pre><pre>RETURN
"&lt;HTML&gt;" +
"&lt;H1 ALIGN=Center&gt;" +
EnumeratedToString("QCType", .QCType) + " control" +
"&lt;/H1&gt;&lt;HR&gt;" +
"&lt;P ALIGN=Left&gt; " +
"Department: " + GetCorrespondentId(CurrentDepartment(), ?).Name + "&lt;BR&gt;" +
GetCorrespondentId(CurrentDepartment(), ?).AddressLine1 + "&lt;BR&gt;" +
"Generated by " + CurrentUser() + " on " + DateToString(Today(), "%d/%m/%y") + "&lt;/P&gt;" +
"&lt;HR&gt;" +
"&lt;TABLE&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Property:&lt;/TD&gt; " +
"&lt;TD&gt;" + .Population.AssessmentMethod.Property.Mnemonic  + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Period:&lt;/TD&gt; " +
"&lt;TD COLSPAN=3&gt;" + DateToString(.StartDate, "%d/%m/%y") + " - " + 
  DateToString(.EndDate, "%d/%m/%y") + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Unit:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(.Population.AssessmentMethod.Property.Unit.Name) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Method:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(.Population.AssessmentMethod.Method) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Station:&lt;/TD&gt;" +
"&lt;TD&gt;" + .Population.AssessmentMethod.Station.Mnemonic + "&lt;/TD&gt;" +
"&lt;/TR&gt;" + 
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Material:&lt;/TD&gt;" +
"&lt;TD&gt;" + .Population.Lot.Material.Mnemonic + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Lot:&lt;/TD&gt;" + 
"&lt;TD&gt;" + .Population.Lot.LotNumber + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Supplier:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(.Population.Lot.Material.Supplier.Name) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Expires:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(DateToString(.Population.Lot.ExpirationDate, "%d/%m/%y")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Comment:&lt;/TD&gt;" +
"&lt;TD COLSPAN=3&gt;" + IfKnownString(.Population.Comment) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Accuracy target:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Population.TargetValue, "%g")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Max. dev.:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(MaxDev) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Range:&lt;/TD&gt; " +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Population.AccuracyLowLimit, "%g")) + "-" +
IfKnownString(FractionalToString(.Population.AccuracyHighLimit, "%g")) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" + 
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Precision mean:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Population.TargetMean, "%g")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; SA:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Population.TargetDeviation, "%g")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Range:&lt;/TD&gt;" + 
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Population.TargetMean - 
  3 * .Population.TargetDeviation, "%g")) + "-" + IfKnownString(FractionalToString(
.Population.TargetMean + 3 * .Population.TargetDeviation, "%g")) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;TR&gt;" + 
"&lt;TD ALIGN=Right&gt; Actual mean:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.Mean, "%g")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; SD:&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(FractionalToString(.StandardDeviation, "%g")) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; Count:&lt;/TD&gt;" +
"&lt;TD&gt;" + IntegerToString(.OfficialResultCount, "%d") + "/" +
  IntegerToString(.ResultCount, "%d") + "&lt;/TD&gt;" + 
"&lt;/TR&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Max. imprecision:&lt;/TD&gt;" +
"&lt;TD&gt;" + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; VC(max):&lt;/TD&gt;" + 
"&lt;TD&gt;" + IfKnownString(VCMax) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; VC(act):&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(VC) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;TR&gt;" +
"&lt;TD ALIGN=Right&gt; Max. inaccuracy:&lt;/TD&gt;" +
"&lt;TD&gt;" + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt; R(max):&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(RMax) + "&lt;/TD&gt;" +
"&lt;TD ALIGN=Right&gt;R(act):&lt;/TD&gt;" +
"&lt;TD&gt;" + IfKnownString(R) + "&lt;/TD&gt;" +
"&lt;/TR&gt;" +
"&lt;/TABLE&gt;" +
"&lt;HR&gt;"
;
}</pre>
                </td>
            </tr>
        </table>
    </body>
</html>