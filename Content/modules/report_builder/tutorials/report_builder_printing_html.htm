<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-gb" xml:lang="en-gb" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>Report Builder - Reiber diagrams</title>
        <link href="../../../Resources/StyleSheets/shared.css" rel="stylesheet" type="text/css" />
        <script src="../../../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" defer="defer" type="text/javascript">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js" defer="defer" type="text/javascript">
        </script>
    </head>
    <body>
        <h1>Printing HTML in JasperReports with MIPS Report Builder HTML renderer</h1>
        <h2>Introduction</h2>
        <p>For GLIMS Genetics, MIPS developed a rich text editor, which stores the data in HTML format. Naturally, such rich texts will also be included in result reports. Unfortunately, the JasperReports library has only limited support for printing HTML documents, lacking support for most notably tables and images.</p>
        <p>The MIPS Report Builder library contains a set of classes to render rich texts in HTML format on reports. This document provides the necessary background information, as well as a step-by-step guide on how to use these classes.</p>
        <h2>Overview</h2>
        <p>An HTML document is comprised of paragraphs, and our HTML renderer implementation provides a way to render individual paragraphs as images, which can then be easily included on reports.</p>
        <p>HtmlRendererFactory provides the following method:</p>
        <ul>
            <li value="1">
                <p>HtmlRenderer create(String html, int width, int height)</p>
                <p>This method analyses the HTML document and creates an HtmlRenderer</p>
            </li>
        </ul>
        <p>HtmlRenderer provides the following methods:</p>
        <ul>
            <li value="1">
                <p>boolean canDocumentBeRenderedAsText()</p>
                <p>This method analyses the HTML document and looks for elements that are not supported by JasperReports built-in text fields (tables and images); it returns true if it finds such elements, and false otherwise</p>
            </li>
            <li value="2">
                <p>int getParagraphCount()</p>
                <p>This method returns the number of paragraphs in the HTML document, and can be used to loop over the paragraphs and render them as text fields or images</p>
            </li>
            <li value="3">
                <p>boolean canParagraphBeRenderedAsText(int paragraphIndex)</p>
                <p>This method analyses the content of the paragraph and returns true if the content of the paragraph can be rendered using a text field, and false if it should be rendered as an Image</p>
            </li>
            <li value="4">
                <p>String getParagraphContent(int paragraphIndex)</p>
                <p>This method returns the content of the paragraph in HTML format, ready for inclusion using a text field report item</p>
            </li>
            <li value="5">
                <p>Int getParagraphPageCount(int paragraphIndex)</p>
                <p>This method analyses the content of the paragraph and returns the number of pages required to render the paragraph given the width and height passed during creation</p>
            </li>
            <li value="6">
                <p>Image getParagraphPageAsImageWithDPI(int paragraphIndex, int pageIndex, float dpi)</p>
                <p>This method returns an image of the page of the paragraph at a given resolution, ready for inclusion using an image report item</p>
            </li>
        </ul>
        <p>The rest of this document offers a step-by-step guide on how to use the HtmlRenderer in practice, to render rich text on your reports.</p>
        <h2>In Practice</h2>
        <p>For this guide, we will apply the required changes to the GLIMS example report layout 'SingleOrderReport' â€“ if you have problems, please contact your support engineer for assistance.</p>
        <h3>Step 1: create a new report layout HtmlText.jrxml</h3>
        <p>The first step is to create an additional report layout, that can be used as a subreport.</p>
        <p>Add an import for package be.mips.reports.html to more easily access the classes that implement the HTML document rendering functionality.</p>
        <p>
            <img src="report_builder_html.png" />
        </p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: SUBREPORT_DIR</li>
            <li value="2">Class: java.lang.String</li>
            <li value="3">Default Value Expression: "./"</li>
        </ul>
        <p>Other report layouts that use HtmlText as subreport, will have to pass the content of their own SUBREPORT_DIR as this parameter so that all layout files can be found at runtime.</p>
        <p>
            <img src="report_builder_html_1.png" />
        </p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: HTML_TEXT</li>
            <li value="2">Class: java.lang.String</li>
        </ul>
        <p>Other report layouts that use HtmlText as subreport, will have to pass the HTML document text as this parameter.</p>
        <p>
            <img src="report_builder_html_2.png" />
        </p>
        <p>Remove all bands from the layout, except Detail 1.</p>
        <h3>Step 2: create HtmlRenderer and ParagraphCount variables</h3>
        <p>The second step is to create an HtmlRenderer for a given HTML document, as well as a variable to hold the number of paragraphs in the HTML document.</p>
        <p>First add a variable with:</p>
        <ul>
            <li value="1">Name: HTML_RENDERER</li>
            <li value="2">Value Class Name: be.mips.reports.html.HtmlRenderer</li>
            <li value="3">
                <p>Expression:</p>
                <p>HtmlRendererFactory.create($P{HTML_TEXT}, &lt;width&gt;, &lt;height&gt;)</p>
                <p>where</p>
                <ul>
                    <li value="1">&lt;width&gt; = target width of the output on the report</li>
                    <li value="2">&lt;height&gt; = target height of the output on the report</li>
                </ul>
            </li>
        </ul>
        <p>To determine the correct values for &lt;width&gt; and &lt;height&gt;, take the paper size and subtract the margins, as well as the space needed for the page headers and footers on your main report layout.</p>
        <p>
            <img src="report_builder_html_3.png" />
        </p>
        <p>Then add a variable with</p>
        <ul>
            <li value="1">Name: HTML_PARAGRAPH_PAGECOUNT</li>
            <li value="2">Value Class Name: java.lang.Integer</li>
            <li value="3">Expression: $V{HTML_RENDERER}.getParagraphCount()</li>
        </ul>
        <p>
            <img src="report_builder_html_4.png" />
        </p>
        <h3>Step 3: create a new subreport element</h3>
        <p>The third step is to create yet another report layout, as subreport of HtmlText.jrxml</p>
        <p>Add a subreport element to band Detail 1, and choose to create a new layout, with name HtmlText_Paragraph.jrxml</p>
        <div class="indented">
            <p>=&gt; This new layout will automatically open in a new tab</p>
            <p>=&gt; Proceed with Step 4; we will return to HtmlText.jrxml later</p>
        </div>
        <h3>Step 4: configure subreport layout HtmlText_Paragraph.jrxml</h3>
        <p>This subreport will work at the paragraph level of the HTML document, and render the paragraph as either a text field or a series of images.</p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: SUBREPORT_DIR</li>
            <li value="2">Class: java.lang.String</li>
            <li value="3">Default Value Expression: "./"</li>
        </ul>
        <p>
            <img src="report_builder_html_5.png" />
        </p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: HTML_RENDERER</li>
            <li value="2">Class: be.mips.reports.html.HtmlRenderer</li>
        </ul>
        <p>
            <img src="report_builder_html_6.png" />
        </p>
        <p>Add a variable with</p>
        <ul>
            <li value="1">Name: HTML_PARAGRAPH</li>
            <li value="2">Class: java.lang.Integer</li>
            <li value="3">Expression: $V{REPORT_COUNT} â€“ 1</li>
        </ul>
        <p>
            <img src="report_builder_html_7.png" />
        </p>
        <p>Add a variable with</p>
        <ul>
            <li value="1">Name: HTML_PARAGRAPH_PAGECOUNT</li>
            <li value="2">Class: java.lang.Integer</li>
            <li value="3">Expression: $P{HTML_RENDERER}.getParagraphPageCount($V{HTML_PARAGRAPH})</li>
        </ul>
        <p>
            <img src="report_builder_html_8.png" />
        </p>
        <p>Remove all bands from the layout, except Detail 1.</p>
        <p>Add a text field to band Detail 1 with</p>
        <ul>
            <li value="1">Expression: $P{HTML_RENDERER}.getParagraphContent($V{HTML_PARAGRAPH})</li>
            <li value="2">Markup: html</li>
        </ul>
        <p>Donâ€™t forget to set text adjust to StretchHeight (when using JaserSoft 6.4, set Stretch on overflow to true)</p>
        <p>
            <img src="report_builder_html_9.png" />
        </p>
        <p>Set the Print When Expression of band Detail 1 to:</p>
        <p style="text-indent: 0.5in;">$P{HTML_RENDERER}.canParagraphBeRenderedAsText($V{HTML_PARAGRAPH})</p>
        <p>
            <img src="report_builder_html_10.png" />
        </p>
        <p>At this point, band Detail 1 is ready to print simple HTML content with only constructs that are supported by the JasperReports built-in text field.</p>
        <p>Now add another detail band to the layout, Detail 2.</p>
        <p>Add a subreport element to band Detail 2, and choose to create a new layout, with name HtmlText_Paragraph_Pages.jrxml</p>
        <div class="indented">
            <p>=&gt;	This new layout will automatically open in a new tab</p>
            <p>=&gt;	Proceed with Step 4; we will return to HtmlText_Paragraph.jrxml later</p>
        </div>
        <h3>Step 5: configure subreport layout HtmlText_Paragraph_Pages.jrxml</h3>
        <p>This subreport will work at the page level, for those paragraphs that need to be rendered as images.</p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: SUBREPORT_DIR</li>
            <li value="2">Class: java.lang.String</li>
            <li value="3">Default Value Expression: "./"</li>
        </ul>
        <p>
            <img src="report_builder_html_11.png" />
        </p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: HTML_RENDERER</li>
            <li value="2">Class: be.mips.reports.html.HtmlRenderer</li>
        </ul>
        <p>
            <img src="report_builder_html_12.png" />
        </p>
        <p>Add a parameter with</p>
        <ul>
            <li value="1">Name: HTML_PARAGRAPH</li>
            <li value="2">Class: java.lang.Integer</li>
            <li value="3">Default Value Expression: 0</li>
        </ul>
        <p>
            <img src="report_builder_html_13.png" />
        </p>
        <p>Add a variable with</p>
        <ul>
            <li value="1">Name: HTML_PARAGRAPH_PAGE</li>
            <li value="2">Class: java.lang.Integer</li>
            <li value="3">Expression: $V{REPORT_COUNT} - 1</li>
        </ul>
        <p>
            <img src="report_builder_html_14.png" />
        </p>
        <p>Remove all bands from the layout, except Detail 1.</p>
        <p>Add an image element to band Detail 1 with</p>
        <div class="indented">
            <p>Expression:</p>
            <p>$P{HTML_RENDERER}.getParagraphPageAsImageWithDPI($P{HTML_PARAGRAPH}, $V{HTML_PARAGRAPH_PAGE}, 600)</p>
        </div>
        <p>At this point, subreport HtmlText_Paragraph_Pages.jrxml is ready to print complex HTML content with constructs that are not supported by the JasperReports built-in text field.</p>
        <p>
            <img src="report_builder_html_15.png" />
        </p>
        <p>Save it, compile it, and return to subreport HtmlText_Paragraph.jrxml to finish that setup.</p>
        <h3>Step 6: finish subreport layout HtmlText_Paragraph.jrxml</h3>
        <p>Now we will wrap up the configuration of the subreport element that points to layout HtmlText_Paragraph_Pages.jrxml</p>
        <p>Add the following parameters to the subreport element:</p>
        <table>
            <col style="width: 360px;" />
            <col style="width: 603px;" />
            <tbody>
                <tr>
                    <td>
                        <p><b>Parameter Name</b>
                        </p>
                    </td>
                    <td>
                        <p><b>Parameter Expression</b>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>SUBREPORT_DIR</p>
                    </td>
                    <td>
                        <p>$P{SUBREPORT_DIR}</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>HTML_RENDERER</p>
                    </td>
                    <td>
                        <p>$P{HTML_RENDERER}</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>HTML_PARAGRAPH</p>
                    </td>
                    <td>
                        <p>$V{HTML_PARAGRAPH}</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
            <img src="report_builder_html_16.png" />
        </p>
        <p>Then set the subreport Expression to</p>
        <div class="indented">
            <p>$P{SUBREPORT_DIR} + "HtmlText_Paragraph_Pages.jasper"</p>
        </div>
        <p>Clear the Connection Expression, and set the Data Source Expression to</p>
        <div class="indented">
            <p>new net.sf.jasperreports.engine.JREmptyDataSource($V{HTML_PARAGRAPH_PAGECOUNT})</p>
        </div>
        <p>
            <img src="report_builder_html_17.png" />
        </p>
        <p>Set the Print When Expression of band Detail 2 to:</p>
        <div class="indented">
            <p>!$P{HTML_RENDERER}.canParagraphBeRenderedAsText($V{HTML_PARAGRAPH})</p>
        </div>
        <p>
            <img src="report_builder_html_18.png" />
        </p>
        <p>At this point, subreport HtmlText_Paragraph.jrxml is ready to print simple and complex HTML constructs, and switch between the JasperReports built-in text field and images as needed.</p>
        <p>Save it, compile it, and return to subreport HtmlText.jrxml to finish that setup.</p>
        <h3>Step 7: finish report layout HtmlText.jrxml</h3>
        <p>Now we will wrap up the configuration of the subreport element that points to layout HtmlText_Paragraph.jrxml</p>
        <p>Add the following parameters to the subreport element:</p>
        <table>
            <col style="width: 369px;" />
            <col style="width: 353px;" />
            <tbody>
                <tr>
                    <td>
                        <p style="font-weight: bold;">Parameter Name</p>
                    </td>
                    <td>
                        <p style="font-weight: bold;">Parameter Expression</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>SUBREPORT_DIR</p>
                    </td>
                    <td>
                        <p>$P{SUBREPORT_DIR}</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>HTML_RENDERER</p>
                    </td>
                    <td>
                        <p>$V{HTML_RENDERER}</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>HTML_PARAGRAPHCOUNT</p>
                    </td>
                    <td>
                        <p>$V{HTML_PARAGRAPH_PAGECOUNT}</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
            <img src="report_builder_html_19.png" />
        </p>
        <p>Then set the subreport Expression to</p>
        <div class="indented">
            <p>$P{SUBREPORT_DIR} + "HtmlText_Paragraph.jasper"</p>
        </div>
        <p>Clear the Connection Expression, and set the Data Source Expression to</p>
        <div class="indented">
            <p>new net.sf.jasperreports.engine.JREmptyDataSource( $V{HTML_PARAGRAPH_PAGECOUNT})</p>
        </div>
        <p>
            <img src="report_builder_html_20.png" />
        </p>
        <p>At this point, report HtmlText.jrxml is ready to print simple and complex HTML constructs, and switch between the JasperReports built-in text field and images as needed.</p>
        <p>Save it, compile it, and prepare to use this layout as a subreport from existing layout files.</p>
        <h3>Step 8: add subreport element for HtmlText.jrxml to existing layouts</h3>
        <p>Open existing file Results.jrxml and add another detail band.</p>
        <p>Set its Print When Expression to</p>
        <div class="indented">
            <p>Boolean.valueOf($F{Detail.ValueType}.equals("String")</p>
            <p>&amp;&amp; $F{Detail.ReportStyle}.equals("Rich text"))</p>
        </div>
        <p>Add a sub report to that band, with</p>
        <ul>
            <li value="1">Expression: $P{SUBREPORT_DIR} + "HtmlText.jrxml"</li>
            <li value="2">Parameters:</li>
        </ul>
        <table style="width: 618px;">
            <tbody>
                <tr>
                    <td>
                        <p style="font-weight: bold;">Parameter Name</p>
                    </td>
                    <td>
                        <p style="font-weight: bold;">Parameter Expression</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>SUBREPORT_DIR</p>
                    </td>
                    <td>
                        <p>$P{SUBREPORT_DIR}</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>HTML_TEXT</p>
                    </td>
                    <td>
                        <p>$F{Detail.Value}</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
            <img src="report_builder_html_21.png" />
        </p>
        <p>Save it, compile it, and then generate a GLIMS result report to verify the output.</p>
        <h2>Closing Thoughts</h2>
        <p>If the HTML output in the JasperReports text field does not meet expectations, then you can choose to render the HTML using images only â€“ at the cost of a larger document and potentially slower printouts.</p>
        <p>Do not go overboard with the DPI parameter: the higher the DPI, the more memory is required for the image and the longer it takes to render the individual pages of the paragraph. We recommend that you match the DPI of the target printer â€“ if the printer can only output pages at 600 DPI, then it is a waste of time and resources to render at 900 or 1200 DPI.</p>
    </body>
</html>